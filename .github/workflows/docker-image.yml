name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout source code
      uses: actions/checkout@v4

    # Step 2: Setup .NET Core
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0'

    # Step 3: Restore dependencies
    - name: Restore dependencies
      run: dotnet restore src/WebApp/WebApp.csproj

    # Step 4: Build the .NET application
    - name: Build the application
      run: dotnet build src/WebApp/WebApp.csproj --configuration Release --no-restore

    # Step 5: Test
    - name: Test the application
      run: dotnet test tests/Application.UnitTests/Application.UnitTests.csproj

    # Step 5: Publish the .NET application
    - name: Publish the application
      run: dotnet publish src/WebApp/WebApp.csproj --configuration Release --output publish

    # Step 6: Build Docker images
    - name: Build webapp Docker image
      run: docker build . -f src/WebApp/Dockerfile -t my-webapp:latest

    - name: Build nginx Docker image
      run: docker build . -f src/client/nginx.conf -t my-nginx:latest

    # Step 7: Tag images
    - name: Tag WebApp image
      run: docker tag webapp:dev breen25/aibot:dev
    
    #Step 8: Tag postgres image
    - name: Tag postgres image
      run: docker tag postgres:15 breen25/aibot:15

    # Optional: Push the Docker images to a registry
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push webapp image
      run: docker push webapp:dev

    #- name: Push nginx image
    #  run: docker push my-nginx:latest

    - name: Push Postgres image
      run: docker push postgres:15

