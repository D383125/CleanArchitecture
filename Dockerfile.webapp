# This stage is used when running from VS in fast mode (Default for Debug configuration)
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER $APP_UID
WORKDIR /app
EXPOSE 8080
EXPOSE 8081


# This stage is used to build the service project. Buold locally and copy into the container 
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release

WORKDIR /build  # Set the working directory inside the Docker image to /build

# Copy src/WebApp/WebApp.csproj from your local filesystem to /src/WebApp in the Docker image
COPY ["src/WebApp/WebApp.csproj", "WebApp/"] 

# Run dotnet restore for WebApp/WebApp.csproj inside the Docker image
RUN dotnet restore "WebApp/WebApp.csproj"

# Copy everything from the local build context (.) into the working directory (/build) inside the Docker image
COPY ./src ./build/src

# Change the working directory inside the Docker image to /src/WebApp
WORKDIR "build/src/WebApp"

# Build WebApp.csproj inside the Docker image and output the build artifacts to /app/build inside the image
RUN dotnet build "WebApp.csproj" -c $BUILD_CONFIGURATION -o /app/build

# This stage is used to publish the service project to be copied to the final stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "WebApp.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# This stage is used in production or when running from VS in regular mode (Default when not using the Debug configuration)
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "WebApp.dll"]